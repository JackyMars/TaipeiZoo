plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace "com.oy.taipeizoo"
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.oy.taipeizoo"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.6.8"

        buildConfigField("String", "SDK_VERSION", "\"$versionName\"")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    composeOptions {
        def kotlin_compiler_version = "1.4.30"
        kotlinCompilerVersion kotlin_compiler_version

        def kotlin_compiler_extension_version = compose_version
        kotlinCompilerExtensionVersion kotlin_compiler_extension_version
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures{
        viewBinding true
        compose true
    }
}

dependencies {

    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'

    def app_compat = "1.3.1"
    implementation "androidx.appcompat:appcompat:$app_compat"

    def material = "1.4.0"
    implementation "com.google.android.material:material:$material"

    def constraint_layout = "2.1.0"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout"

    def androidx_ui = "1.0.0-alpha07"
    implementation "androidx.ui:ui-tooling:$androidx_ui"

    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.compose.runtime:runtime-rxjava2:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material:material-icons-core:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"

    def compose_constraint = "1.0.0-beta02"
    implementation "androidx.constraintlayout:constraintlayout-compose:$compose_constraint"

    def compose_activity = "1.3.1"
    implementation "androidx.activity:activity-compose:$compose_activity"

    def nav_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //Retrofit是專為API連線而生的第三方套件，與API連線的效率非常高，最特別的是其規範的REST框架讓程式高度解耦，好寫易維護
    def retrofit = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"

    def hilt = "2.37"
    implementation "com.google.dagger:hilt-android:$hilt"
    kapt "com.google.dagger:hilt-android-compiler:$hilt"

    def hilt_lifecycle_viewmodel = "1.0.0-alpha03"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_lifecycle_viewmodel"
    kapt "androidx.hilt:hilt-compiler:$hilt_lifecycle_viewmodel"
    //Glide是一個快速高效的Android圖片加載庫，支持拉取，解碼和展示視頻快照，圖片，和GIF動畫
    def glide = "4.11.0"
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"

    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

//
//    //RecyclerView 也ViewGroup，處理列表式的資料，重複利用已經存在的 View
//    def recycler_view = "1.2.0-alpha06"
//    implementation "androidx.recyclerview:recyclerview:$recycler_view"
//    def lifecycle = "2.2.0"
//    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle"
}